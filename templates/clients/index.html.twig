{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
<style>
    #progress {
        width: 100%;
        background-color: #f3f3f3;
        display: none;
        padding: 20px;
    }

    .progress {
        height: 30px;
        margin-bottom: 20px;
    }

    #progress-bar {
        height: 30px;
        width: 0;
        background-color: #4caf50;
    }

    #report {
        display: none;
        margin-bottom: 0;
    }

    #error {
        display: none;
        margin-bottom: 0;
    }

    button {
        margin: 10px 0;
    }

    form {
        margin: 30px 0;
    }
</style>
{% endblock %}

{% block title %}Import klientów{% endblock %}

{% block body %}
<div class="container rounded">
    <h1>Import klientów</h1>

    {{ form_start(form, { 'attr': { 'id': 'import-form' } }) }}
    {{ form_widget(form) }}
    <button class="btn btn-primary">Zaimportuj</button>
    {{ form_end(form) }}

    <div id="progress" class="rounded">
        <p>Plik został wysłany. Rozpoczynam przetwarzanie.</p>
        <div class="progress">
            <div id="progress-bar" class="progress-bar progress-bar-striped bg-success progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
        </div>

        <div id="report" class="alert alert-success" role="alert"></div>
    </div>
    <div id="error" class="alert alert-danger"></div>

    <a href="{{ path('import_summary') }}" class="btn">Zobacz podsumowanie ostatniego importu</a>
</div>
{% endblock %}

{% block footer_javascripts %}
    <script>
        const mercureUrl = "{{ mercure_url }}"
        const form = document.getElementById("import-form");
        const progressContainer = document.getElementById("progress");
        const progressBar = document.getElementById("progress-bar");
        const reportContainer = document.getElementById("report");
        const errorContainer = document.getElementById("error");

        form.addEventListener("submit", function(event) {
            event.preventDefault();

            const formData = new FormData(this);
            fetch(this.action, {
                method: this.method,
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        errorContainer.innerHTML = data.error;
                        errorContainer.style.display = "block";
                        throw new Error(data.error);
                    }
                    errorContainer.style.display = "none";
                    startProgressTracking(data.topic);
                })
                .catch(error => {
                    console.error("Podczas wysyłania pliku wystąpił błąd:", error);
                });
        });

        function startProgressTracking(topic) {
            progressContainer.style.display = "block";
            progressBar.innerText = "0%";

            const eventSource = new EventSource(mercureUrl + `?topic=${encodeURIComponent(topic)}`);

            eventSource.onmessage = (event) => {
                const data = JSON.parse(event.data);

                progressBar.style.width = data.progress + "%";
                progressBar.setAttribute("aria-valuenow", data.progress);
                progressBar.innerText = data.progress + "%";

                if (data.progress >= 100) {
                    console.log("Import zakończony!");
                    eventSource.close();
                    showReport(data);
                }
            };

            eventSource.onerror = (error) => {
                console.error("Błąd Mercure:", error);
            };
        }

        function showReport(data) {
            if (typeof data.totalRows === "undefined" || typeof data.invalidRows === "undefined") {
                reportContainer.innerHTML = "<p>Brak szczegółowych danych o imporcie.</p>";
                reportContainer.style.display = "block";
                return;
            }

            let reportHTML = `
            <h4>Import zakończony sukcesem!</h4>
            <p><strong>Łączna liczba wierszy:</strong> ${data.totalRows}<br>
            <strong>Liczba zapisanych rekordów:</strong> ${data.successCount}<br>
            <strong>Liczba błędnych wierszy:</strong> ${data.invalidRows}</p>
        `;

            if (data.invalidRows > 0) {
                reportHTML += `<divclass="alert alert-danger"><h4>Błędne wiersze:</h4><ul>`;
                for (const [rowNumber, rowData] of Object.entries(data.errorRows)) {
                    reportHTML += `<li><strong>Wiersz ${rowNumber}:</strong> ${rowData.join(", ")}</li>`;
                }
                reportHTML += `</ul></div>`;
            }

            reportContainer.innerHTML = reportHTML;
            reportContainer.style.display = "block";
        }
    </script>
{% endblock %}
